#include "StdAfx.h"
#include "windows.h"
#include "ProtocolCommBackgroundThread.h"
#include <iostream>
#include <iomanip>

#include "../shared/config/decode/DecodeVer0.h"

ProtocolCommBackgroundThread::ProtocolCommBackgroundThread(void) : hThread(0)
{
	// register all callbacks/handlers to supported protocol services
	callbackMap.insert(std::pair<uint8_t, IService *>(KISS_VERSION_AND_ID, &srvVersionAndId));

	// initialize and open serial port
	const BOOL serialInitResult = s.init();

	// create a new instance of serial RX background thread
	lpcSerialThread = new SRBT(&s, &callbackMap);

	// set serial context for all services handlers
	srvVersionAndId.setSerialContext(&s);
	srvReadDid.setSerialContext(&s);
	srvRunningConfig.setSerialContext(&s);

	// create mutex which will protect agains starting two paralell comm transactions
	hThreadMutex = CreateMutex(NULL, FALSE, L"ProtocolCommMutex");

	// create an event which will be generated by callback in each service handler
	hServiceSyncEvent = CreateEvent(NULL, FALSE, FALSE, L"ServiceSyncEv");

	std::cout << "I = PCBT::ProtocolCommBackgroundThread" << std::endl;
	std::cout << "D = PCBT::ProtocolCommBackgroundThread, threadMutex: 0x" << std::hex 
		<< hThreadMutex << std::dec << std::endl;
	std::cout << "D = PCBT::ProtocolCommBackgroundThread, serviceSyncEvent: 0x" << std::hex 
		<< hServiceSyncEvent << std::dec << std::endl;

}

ProtocolCommBackgroundThread::~ProtocolCommBackgroundThread(void)
{
}

BOOL ProtocolCommBackgroundThread::commVersionAndUpdateGui(HWND mainWindow, HWND editCodeplugWindow)
{
	BOOL result = false;

	DWORD threadId = 0;

	this->srvVersionAndId_context.hEditCodeplugWindow = editCodeplugWindow;
	this->srvVersionAndId_context.hMainWindow = mainWindow;
	this->srvVersionAndId_context.lpcGetVersionAndId = &this->srvVersionAndId;
	this->srvVersionAndId_context.hMutex = this->hThreadMutex;

	hThread = CreateThread(
				NULL, 
				NULL, 
				ProtocolCommBackgroundThread_GetVersion, 
				&this->srvVersionAndId_context, 
				NULL,
				&threadId);

	std::cout << "I = PCBT::commVersionAndUpdateGui, " <<  
		std::hex << ", threadId: 0x" << threadId << std::dec << std::endl;

	if (hThread != NULL)
	{
		result = true;
	}

	return result;
}

BOOL ProtocolCommBackgroundThread::getVersion(LPCSV p) 
{
	BOOL result = false;

	return result;
}

BOOL ProtocolCommBackgroundThread::commReadDidAndUpdateGui(VOID(*lpfnUpdateGuiCallback)(DidResponse), int didNumber) {

	BOOL result = false;

	DWORD threadId = 0;

	this->srvReadDid_context.didNumber = didNumber;
	this->srvReadDid_context.hMutex = this->hThreadMutex;
	this->srvReadDid_context.lpcReadDid = &this->srvReadDid;
	this->srvReadDid_context.lpfnUpdateGuiCallback = lpfnUpdateGuiCallback;

	hThread = CreateThread(
				NULL, 
				NULL, 
				ProtocolCommBackgroundThread_ReadDid, 
				&this->srvReadDid_context, 
				NULL,
				&threadId);

	std::cout << "I = PCBT::commReadDidAndUpdateGui, " <<  
		std::hex << ", threadId: 0x" << threadId << std::dec << std::endl;

	if (hThread != NULL)
	{
		result = true;
	}

	return result;
}
	
BOOL ProtocolCommBackgroundThread::commRunningConfigAndUpdateGui(
										VOID(*lpfnNewConfigCallback)(VOID),
										std::vector<uint8_t> * lpvOutConfigData) 
{
	
	BOOL result = false;

	DWORD threadId = 0;

	this->srvGetRunningConfig_context.hMutex = this->hThreadMutex;
	this->srvGetRunningConfig_context.lpcGetRunningConfig = &this->srvRunningConfig;
	this->srvGetRunningConfig_context.lpvEditConfig = lpvOutConfigData;
	this->srvGetRunningConfig_context.lpfnEditConfigUpdateCallback = lpfnNewConfigCallback;

	hThread = CreateThread(
				NULL, 
				NULL, 
				ProtocolCommBackgroundThread_GetRunningConfig, 
				&this->srvGetRunningConfig_context, 
				NULL,
				&threadId);

	std::cout << "I = PCBT::commRunningConfigAndUpdateGui, " <<  
		std::hex << ", threadId: 0x" << threadId << std::dec << std::endl;

	if (hThread != NULL)
	{
		result = true;
	}

	return result;
}
